program GraphJalurPenghubungKota
deklarasi
    type vertex = record < idVertex : string, edge : edge,  next : vertex >
    type edge = record < cost : integer, next : vertex, tujuan : vertex >
    type graph = record < g : graph, first : vertex >

    procedure createVertex(g : graph, a : string)
    deklarasi
        newVertex : vertex
        akhir : vertex
    deskripsi
        newVertex.idVertex <- a
        newVertex.edge <- null
        newVertex.next <- null

        if g.first = null then
            g.first <- newVertex
        else
            akhir <- g.first
            while (akhir.next != null) do
                akhir <- akhir.next
            endwhile
            akhir.next = newVertex
        endif
    
    procedure addEdge(awal : vertex, akhir : vertex, nilaiedge : integer)
    deklarasi
        newEdge : edge
        edgeAkhir : edge
    deskripsi
        newEdge.cost <- nilaiedge
        newEdge.next <- null
        newEdge.tujuan <- akhir

        if awal.edge = null then
            awal.edge <- newEdge
        else
            edgeAkhir <- awal.edge
            while (edgeAkhir.next != null) do
                edgeAkhir <- edgeAkhir.next
            endwhile
            edgeAkhir.next = newEdge
    
    procedure cetakGraph(g : graph)
    deklarasi
        tempVertex : vertex
        tempEdge : edge
    deskripsi
        tempVertex = g.first
        if tempVertex != null then
            while (tempVertex != null) do
                output(tempVertex.idVertex)
                tempEdge <- tempVertex.edge

                while (tempEdge != null) do
                    output(terhubung dengan tempEdge.tujuan.idVertex, dengan cost tempEdge.cost)
                    tempEdge <- tempEdge.next
                endwhile
                tempVertex <- tempVertex.next
            endwhile
        else
            output(graph kosong)
        endif

    function searchVertex(g : graph, c : string) -> vertex
    deklarasi
        hasil : vertex
        bantu : vertex
        ketemu : integer
    deskripsi
        while (bantu != null) and (ketemu = 0) do
            if bantu.idVertex = c then
                hasil = bantu
                ketemu = 1
            else 
                bantu = bantu.next
            endif
        endwhile
        return hasil

    procedure deleteAll(awal : vertex)
    deklarasi
        bantu : edge
        hapus : edge
    deskripsi
        bantu <- awal.edge
        while (bantu != null) do
            hapus <- bantu
            bantu <- bantu.next
            awal.edge <- bantu
            hapus.next <- null
        endwhile

    procedure deleteedge(ctujuan : string, awal : vertex)
    deklarasi
        hapus : edge
        prev : edge
        ketemu : integer
    deskripsi
        hapus <- awal.edge
        if hapus != null then
            prev <- null
            ketemu <- 0

            while (hapus != null) and (ketemu = 0) do
                if hapus.tujuan.idVertex = ctujuan then
                    ketemu <- 1
                else
                    prev <- hapus
                    hapus <- hapus.next
                endif
            endwhile

            if ketemu = 1 then
                if prev = null then
                    awal.edge <- hapus.next
                    hapus.next <- null
                else
                    prev.next <- hapus.next
                    hapus.next <- null
                endif
            endif
        else
            output(tidak ada jalur vertex tujuan)
        endif

    procedure deleteVertex(c : string, g : graph)
    deklarasi
        hapus : vertex
        prev : vertex
        ketemu : integer
        bantu : vertex
    deskripsi
        hapus <- g.first

        if hapus != null then
            prev <- null
            ketemu = 0

            while (hapus != null) and (ketemu = 0) do
                if hapus.idVertex = c then
                    ketemu <- 1
                else 
                    prev <- hapus
                    hapus <- hapus.next
                endif
            endwhile

            if ketemu = 1 then
                bantu <- g.first

                while (bantu != null) do
                    if bantu != hapus then
                        deleteedge(hapus.idVertex, bantu)
                    endif
                    bantu <- bantu.next
                endwhile
                deleteAll(hapus)

                if prev = null then
                    g.first <- hapus.next
                    hapus.next <- null
                else
                    if hapus.next <- null then
                        prev.next <- null
                    else
                        prev.next <- hapus.next
                        hapus.next <- null
                    endif
                endif
            else
                output(tidak ada vertex dengan karakter tersebut)
            endif
        else
            output(tidak ada vertex dengan karakter tersebut)
        endif
    
    graph : graph
    vertexNamaKotaAwal : vertex
    vertexNamaKotaAkhir : vertex
    namaKota : string
    namaKotaAwal : string
    namaKotaAkhir : string
    jumlahVertex : integer
    jumlahEdge : integer
    cost : integer
    menu : integer
    kota : array[1...jumlahVertex] of vertex
deskripsi
    repeat do 
        output('===== PROGRAM GRAPH JALUR PENGHUBUNG KOTA =====')
        output('1. Tambah kota')
        output('2. Tambah jalur antarkota')
        output('3. Hapus kota')
        output('4. Hapus jalur antarkota')
        output('5. Hapus semua kota dan jalur antarkota')
        output('6. Cetak graph')
        output('0. Keluar')
        output('Masukan pilihan: ')
        input(menu)

        case (menu) of
            1:  output('=== TAMBAH KOTA ===')
                output('Masukan jumlah kota: )
                input(jumlahVertex)

                for i <- 1 to jumlahVertex do
                    output('--- Masukan nama kota: ')
                    input(namaKota)
                    kota[i] <- searchVertex(graph, namaKota)
                endfor
            2:  output('=== TAMBAH JALUR ANTARKOTA ===')
                output('Masukan jumlah jalur antarkota yang ingin ditambah: ')
                input(jumlahEdge)

                for i <- 1 to jumlahEdge do
                    output('--- Masukan nama kota awal: ')
                    input(namaKotaAwal)
                    output('--- Masukan nama kota akhir: ')
                    input(namaKotaAkhir)
                    output('Masukan cost jalur: ')
                    input(cost)
                    vertexNamaKotaAwal <- searchVertex(graph, namaKotaAwal)
                    vertexNamaKotaAkhir <- searchVertex(graph, namaKotaAkhir)
                    addEdge(vertexNamaKotaAwal, vertexNamaKotaAkhir, cost)
                endfor
            3:  output('=== HAPUS KOTA ===')
                output('Masukan jumlah kota: ')
                input(jumlahVertex)
                
                for i <- 1 to jumlahVertex do
                    output('--- Masukan nama kota yang ingin dihapus: ')
                    input(namaKota)
                    deleteVertex(namaKota, graph)
                endfor
            4:  output('=== HAPUS JALUR ANTARKOTA ===')
                output('Masukan jumlah jalur yang ingin dihapus: ')
                input(jumlahEdge)

                for i <- 1 to jumlahEdge do
                    output('--- Masukan nama kota awal: ')
                    input(namaKotaAwal)
                    output('--- Masukan nama kota akhir: ')
                    input(namaKotaAkhir)
                    vertexNamaKotaAwal <- searchVertex(graph, namaKotaAwal)
                    deleteedge(namaKotaAkhir, vertexNamaKotaAwal)
                endfor
            5:  output('=== HAPUS KOTA DAN JALUR ANTARKOTA ===')
                output('Masukan nama kota: ')
                input(namaKotaAwal)
                vertexNamaKotaAwal <- searchVertex(graph, namaKotaAwal)
                deleteAll(graph, vertexNamaKotaAwal)
            6:  output('=== CETAK GRAPH KOTA DENGAN JALUR ANTARKOTA ===')
                cetakGraph(graph)
            0:  output('Anda telah Keluar')
            default: output('Input salah')
        endcase
    until (menu >= 1) and (menu <= 6)