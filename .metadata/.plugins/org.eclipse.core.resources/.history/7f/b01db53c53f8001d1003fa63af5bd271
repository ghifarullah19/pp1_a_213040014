package pertemuan10_Stack;

public class StrukturStack {

    // Latihan 2
    private int[] array;
    private int capacity;
    private int TOP;
    
    public final int MIN = -1;

    public int getTop() {
    	return TOP;
    }
    
    public boolean isFull() {
    	return TOP == capacity;
    }
    
    public StrukturStack(int capacity) {
    	super();
    	array = new int[capacity];
    	this.capacity = capacity;
    	TOP = MIN;
    }
    
    // Latihan 2
    public boolean isEmpty() {
        return TOP == MIN;
    }

    // Latihan 1
    public void push(int data) {
        if (isFull()) {
            System.out.println("Stack penuh");
        } else {
            TOP++;
            array[TOP] = data;
        }
    }

    // Tugas
//    public void dequeue() {
//        if (isEmpty()) {
//            System.out.println("Data masih kosong");
//        } else {
//            Node tempFRONT = FRONT;
//            FRONT = FRONT.getNext();
//            REAR = null;
//            tempFRONT = null;
//        }
//    }

    // Latihan 3
    public int size() {
    	return TOP == -1 ? 0 : TOP + 1;
    }

    // Latihan 3
//    public int top() {
//        return TOP != -1 ? array[TOP] : -1;
//    }

    // Latihan 5
    public void displayElement() {
        System.out.print("Elemen Stack: ");
        if (isEmpty()) {
            System.out.println("Stack Kosong");
        } else {
            for (int i = 0; i < capacity; i++) {
                System.out.print(array[i] + " ");
            }
            System.out.println();
        }
    }
}
